CREATE TABLE rpi_test( a int , b varchar(10), c char);
-- add some data so that all tests have something to work with.
INSERT INTO rpi_test VALUES( 1, 2 );
INSERT INTO rpi_test VALUES( 3, 4 );
INSERT INTO rpi_test VALUES( 5, 6 );
CREATE INDEX rpi_idx1 ON rpi_test(a , b);
ALTER TABLE rpi_test ADD primary key(a, b) WITH (INDEX = 'rpi_idx1'); -- should fail; non-unique
ERROR:  "rpi_idx1" is not a unique index
DETAIL:  cannot create primary key using a non-unique index.
CREATE UNIQUE INDEX rpi_idx2 ON rpi_test(a , b);
ALTER TABLE rpi_test ADD primary key(a, b) WITH (INDEX = 'rpi_idx2');
ALTER TABLE rpi_test DROP constraint rpi_idx2;
DROP INDEX rpi_idx2; -- should fail
ERROR:  index "rpi_idx2" does not exist
ALTER TABLE rpi_test ADD primary key(a, b);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "rpi_test_pkey" for table "rpi_test"
CREATE UNIQUE INDEX rpi_idx3 ON rpi_test(a, b);
ALTER TABLE rpi_test ADD PRIMARY KEY(a, b) WITH (INDEX = 'rpi_idx3');
CREATE UNIQUE INDEX rpi_idx4 ON rpi_test( a, b );
ALTER TABLE rpi_test ADD PRIMARY KEY(a, b) WITH (INDEX = 'rpi_idx4');
DROP INDEX rpi_idx3; -- should fail
ERROR:  index "rpi_idx3" does not exist
CREATE UNIQUE INDEX rpi_idx5 ON rpi_test( a );
ALTER TABLE rpi_test ADD primary key(a) WITH (INDEX = 'rpi_idx5');
ERROR:  existing primary key and the index do not match
CREATE UNIQUE INDEX rpi_idx6 ON rpi_test( b );
ALTER TABLE rpi_test ADD primary key(b) WITH (INDEX = 'rpi_idx6');
ERROR:  existing primary key and the index do not match
CREATE UNIQUE INDEX rpi_idx7 ON rpi_test( b, a );
ALTER TABLE rpi_test ADD PRIMARY KEY(b, a) WITH (INDEX = 'rpi_idx7');
ERROR:  column list of existing primary key and the index do not match
ALTER TABLE rpi_test ADD PRIMARY KEY(b, a) WITH (INDEX = 'rpi_idx_doesnt_exist');
ERROR:  relation "rpi_idx_doesnt_exist" does not exist
SELECT relname, relkind FROM pg_class WHERE relname like E'rpi\\_%';
 relname  | relkind 
----------+---------
 rpi_idx1 | i
 rpi_idx4 | i
 rpi_idx5 | i
 rpi_idx6 | i
 rpi_idx7 | i
 rpi_test | r
(6 rows)

DROP TABLE rpi_test;
SELECT relname, relkind FROM pg_class WHERE relname like E'rpi\\_%';
 relname | relkind 
---------+---------
(0 rows)

